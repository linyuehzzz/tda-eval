ind = read.csv("franklin/microdata/franklin_ind.csv")
cons = read.csv("franklin/microdata/franklin_cons.csv")
weights <- apply(cons, 1, function(x)
ipfp(x, ind, x0))
library(ipfp)
weights <- apply(cons, 1, function(x)
ipfp(x, ind, x0))
weights <- apply(cons, 1, function(x)
ipfp(x, ind))
weights <- apply(cons, 1, function(x)
ipfp(x, ind, ncol(ind)))
library(ipfp)
ind = read.csv("franklin/microdata/franklin_ind.csv")
cons = read.csv("franklin/microdata/franklin_cons.csv")
weights <- apply(cons, 1, function(x)
ipfp(x, ind, x0))
x0 <- rep(1, nrow(ind))
weights <- apply(cons, 1, function(x)
ipfp(x, ind, x0))
library(ipfp)
ind <- read.csv("franklin/microdata/franklin_ind.csv")
cons <- read.csv("franklin/microdata/franklin_cons.csv")
library(ipfp)
ind <- read.csv("franklin/microdata/ipf/franklin_ind_3904107.csv")
cons <- read.csv("franklin/microdata/ipf/franklin_cons_3904107.csv")
# Create 2D weight matrix (individuals, areas)
weights <- array(NA, dim=c(nrow(ind),nrow(cons)))
cons <- apply(cons, 2, as.numeric) # convert the constraints to 'numeric'
View(cons)
ind_t <- t(ind) # transpose the dummy variables for ipfp
x0 <- rep(1, nrow(ind)) # set the initial weights
weights <- apply(cons, 1, function(x)
ipfp(x, ind, x0))
ind_t <- t(ind) # transpose the dummy variables for ipfp
x0 <- rep(1, nrow(ind)) # set the initial weights
weights <- apply(cons, 1, function(x)
ipfp(x, ind_t, x0))
library(ipfp)
## read data
ind <- read.csv("franklin/microdata/ipf/ohio_ind.csv")
int_expand_vector <- function(x){
index <- 1:length(x)
rep(index, round(x))
}
ind_sub <- ind[sample(nrow(ind), as.integer(nrow(ind) * 0.3)), ]
cons <- read.csv("franklin/microdata/ipf/franklin_cons_3904107.csv")
## some pre-processing
cons <- subset(cons, select = -c(GEOID10))
weights <- array(NA, dim=c(nrow(ind_sub),nrow(cons))) # Create 2D weight matrix (individuals, areas)
cons <- apply(cons, 2, as.numeric) # convert the constraints to 'numeric'
ind_sub <- apply(ind_sub, 2, as.numeric) # convert the individuals to 'numeric'
ind_subt <- t(ind_sub) # transpose the dummy variables for ipfp
x0 <- rep(1, nrow(ind_sub)) # set the initial weights
## ipf
weights <- apply(cons, 1, function(x)
ipfp(x, ind_subt, x0, maxit = 20))
weights2 <- weights[ , colSums(is.na(weights)) == 0]
## check if weights are appropriate
ind_agg <- t(apply(weights2, 2, function(x) colSums(x * ind_sub)))
cor(as.numeric(ind_agg), as.numeric(cons)) # fit between contraints and estimate
